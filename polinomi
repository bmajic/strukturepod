#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAXLINE 1024

typedef struct Element* position;

struct Element
{
	int coeff;
	int exp;
	position next;


};

int ReadPolynomialFromFile(const char* filename, position head) {
	FILE* file = fopen(filename, "r");
	if (!file) {
		printf("Error opening file.\n");
		return -1;
	}

	char buffer[MAXLINE];
	int c, e, numBytes;
	position nE;

	
	while (fgets(buffer, MAXLINE, file) != NULL) {
		while (strlen(buffer) > 0) {
		
			int status = sscanf(buffer, " %d %d %n", &c, &e, &numBytes);
			if (status < 2) {
				break;  
			}

			
			nE = createElement(c, e);
			if (!nE) {
				fclose(file);
				return -1;
			}
			InsertSorted(head, nE);

			
			buffer += numBytes;
		}
	}

	fclose(file);
	return 0;
}

position createElement(int coeff, int exp)
{
	position nE;
	nE = (position)malloc(sizeof(struct Element));
	if (!nE)
	{
		printf("Error in malloc");
		return NULL;
	}

	nE->coeff = coeff;
	nE->exp = exp;
	nE->next = NULL;

	return nE;

}




int InsertSorted(position head, position nE) {
	position temp = head;

	while (temp->next != NULL && temp->next->exp > nE->exp) {
		temp = temp->next;
	}

	if (temp->next != NULL && temp->next->exp == nE->exp) {
		temp->next->coeff += nE->coeff;

		if (temp->next->coeff == 0) {
			position toDelete = temp->next;
			temp->next = temp->next->next;
			free(toDelete);
		}
		free(nE);  
	}
	else {
		
		nE->next = temp->next;
		temp->next = nE;
	}

	return 0;
}




position AddPolynomials(position head1, position head2) {
	position resultHead = (position)malloc(sizeof(struct Element));  
	if (resultHead == NULL) {
		printf("Error in malloc\n");
		return NULL;
	}
	resultHead->next = NULL;


	position temp1 = head1;
	position temp2 = head2;

	while (temp1 != NULL) {
		position newElement = (position)malloc(sizeof(struct Element));
		if (newElement == NULL) {
			printf("Error in malloc\n");
			return NULL;
		}
		newElement->coeff = temp1->coeff;
		newElement->exp = temp1->exp;
		newElement->next = NULL;
		InsertSorted(resultHead, newElement);  
		temp1 = temp1->next;
	}

	while (temp2 != NULL) {
		position newElement = (position)malloc(sizeof(struct Element));
		if (newElement == NULL) {
			printf("Error in malloc\n");
			return NULL;
		}
		newElement->coeff = temp2->coeff;
		newElement->exp = temp2->exp;
		newElement->next = NULL;
		InsertSorted(resultHead, newElement);  
		temp2 = temp2->next;
	}

	return resultHead->next; 
}


int MultiplyPolynomials(position head, position poly1, position poly2) {

	position temp1 = poly1->next;
	position temp2 = NULL;

	while (temp1 != NULL)
	{
		temp2 = poly2->next;

		while(temp2 != NULL)
		{
			int newCoeff = temp1->coeff * temp2->coeff;
			int newExp = temp1->exp + temp2->exp;

			position newElement = createElement(newCoeff, newExp);
			if (!newElement) return -1;

			InsertSorted(head, newElement);

			temp2 = temp2->next;

		
		}
		temp1 = temp1->next;
	}

	return 0;

}

void print(position head)
{
	if (head == NULL)
	{
		printf("No members in polinomal");

	}
	else
	{
		position temp = head;
		while (temp != NULL)
		{
			printf("%d ^%d", temp->coeff, temp->exp);
			temp = temp->next;
		}
	}
}




	int main() {

		
		position head1 = (position)malloc(sizeof(struct Element));
		position head2 = (position)malloc(sizeof(struct Element));
		position resultHead = (position)malloc(sizeof(struct Element));

		
		if (!head1 || !head2 || !resultHead) {
			printf("Memory allocation error.\n");
			return -1;
		}

		head1->next = NULL;
		head2->next = NULL;
		resultHead->next = NULL;

		
		if (ReadPolynomialFromFile("polynomial1.txt", head1) != 0) {
			printf("Error reading polynomial1.txt\n");
			return -1;
		}

		if (ReadPolynomialFromFile("polynomial2.txt", head2) != 0) {
			printf("Error reading polynomial2.txt\n");
			return -1;
		}

		
		printf("Polynomial 1: ");
		print(head1->next);
		printf("\n");

		printf("Polynomial 2: ");
		print(head2->next);
		printf("\n");

		
		position sumHead = (position)malloc(sizeof(struct Element));
		if (!sumHead) {
			printf("Memory allocation error.\n");
			return -1;
		}
		sumHead->next = NULL;
		sumHead = AddPolynomials(head1->next, head2->next);

		printf("Sum of polynomials: ");
		print(sumHead);
		printf("\n");

		
		position productHead = (position)malloc(sizeof(struct Element));
		if (!productHead) {
			printf("Memory allocation error.\n");
			return -1;
		}
		productHead->next = NULL;
		MultiplyPolynomials(productHead, head1->next, head2->next);

		printf("Product of polynomials: ");
		print(productHead->next);
		printf("\n");

		
		free(head1);
		free(head2);
		free(resultHead);
		free(sumHead);
		free(productHead);

		return 0;
	}


